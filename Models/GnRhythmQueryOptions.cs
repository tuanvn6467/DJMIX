
namespace GracenoteSDK {

using System;
using System.Runtime.InteropServices;

/**
* \class GnRhythmQueryOptions
* Configures options for GnRhythmQuery
*/
public class GnRhythmQueryOptions : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GnRhythmQueryOptions(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GnRhythmQueryOptions obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

/**
*  Sets the lookup data value for the MusicID-File query.
*  @param lookupData   [in] Set One of the GnLookupData values
*  @param bEnable      [in] True or false to enable or disable
*/
  public void LookupData(GnLookupData lookupData, bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_LookupData(swigCPtr, (int)lookupData, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Specifies how many tracks to return in the playlist response to this query.
*  @param count        [in] The number of tracks to return. 
*  <p><b>Remarks:</b></p>
*  The range for this option is 1..25, The default value is 5.
*/
  public void ReturnCount(uint count) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_ReturnCount(swigCPtr, count);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Tuning Parameter to influence how Rhythm uses popularity to affect how the radio station playlist is generated.
*  @param amount	[in] new popularity focus setting.
*  <p><b>Remarks:</b></p>
*  The range for this option is 0..1000, The default value is 1000.
*/
  public void FocusPopularity(uint amount) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_FocusPopularity(swigCPtr, amount);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Tuning Parameter to influence how Rhythm uses similarity to affect how the radio station playlist is generated.
*  @param amount	[in] new similarity focus setting.
*  <p><b>Remarks:</b></p>
*  The range for this option is 0..1000, The default value is 1000.
*/
  public void FocusSimilarity(uint amount) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_FocusSimilarity(swigCPtr, amount);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/** 
*  Specifies a maximum number of tracks per artist for recommended playlist results. 
*  @param count 	[in] Maximum number of tracks per artist. 
*  <p><b>Remarks:</b></p>
*  This option is only applicable to Recommendations generated by GnRhythmQuery
*  The range for this option is 1..1000.
* @ingroup Music_Rhythm_TypesEnums
*/
  public void RecommendationMaxTracksPerArtist(uint count) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_RecommendationMaxTracksPerArtist(swigCPtr, count);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/** 
*  Enabling this option will cause results to be sequenced in a radio-like fashion, otherwise results will be without sequencing. 
*  @param bEnable 	[in] True or false to enable or disable
*  <p><b>Remarks:</b></p>
*  This option is only applicable to Recommendations generated by GnRhythmQuery
*  To enable Radio sequencing, define this option key with a True value.
*  Without this option Rhythm might return you 5 Britney Spears tracks.
*  With this option enabled Rhtyhm would never do that, it would mix it up more, like a radio station.
* @ingroup Music_Rhythm_TypesEnums
*/
  public void RecommendationRotationRadio(bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_RecommendationRotationRadio(swigCPtr, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/** 
*  When creating a radio station, you have the option to enable DMCA rules, which reduce the repetition of songs and albums in conformance with DMCA guidelines. By default, DMCA is not enabled.  
*  @param bEnable 	[in] True or false to enable or disable
*  <p><b>Remarks:</b></p>
*  This option cannot be changed after the radio station has been created
* @ingroup Music_Rhythm_TypesEnums
*/
  public void StationDMCA(bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_StationDMCA(swigCPtr, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
* This option allows setting of a specific network interface to be used with connections made by  
* this object. Choosing which interface to use can be beneficial for systems with multiple 
* network interfaces. Without setting this option, connections will be made of the default network interface
* as decided by the operating system.
*  @param ipAddress [in] local IP address for the desired network interface
*/
  public void NetworkInterface(string ipAddress) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_NetworkInterface(swigCPtr, ipAddress);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Set option using option name
*  @param option   [in] Option name
*  @param bEnable	[in] True or false to enable or disable
*/
  public void Custom(string option, bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_Custom__SWIG_0(swigCPtr, option, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Set option using option name
*  @param option   [in] Option name
*  @param value	[in] Option value, as unsigned integer
*/
  public void Custom(string option, uint value) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_Custom__SWIG_1(swigCPtr, option, value);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Set option using option name
*  @param option   [in] Option name
*  @param value	[in] Option value
*/
  public virtual void Custom(string option, string value) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_Custom__SWIG_2(swigCPtr, option, value);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
